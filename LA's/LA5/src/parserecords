#!/bin/awk -f 

# Awk program to read CSV data and parse out relevant real estate records
# This particular program parses for single-family dwellings, saving the
# relevant data in HTML, preserving only date, subdivision name, lot,
# block, and value, and printing the data to a file called parseData.html.
# The input file used is determined by the user at run time, but must be a
# comma separated value (csv) document.
#
# @author Jason Egbert

# The program begins here. 
BEGIN {
	# Build the start of the HTML file, establishing a title, and heading,
	# as well as the table column headers
	print "<html>\n\n" > "parseData.html"
	print "<head>\n" >> "parseData.html"

	# Title
	print "<title>Single Family Dwelling</title>\n" >> "parseData.html"
	print "</head>\n\n" >> "parseData.html"
	print "<body>\n" >> "parseData.html"
	
	# Heading
	print "<h1>Single Family Dwellings</h1>\n\n" >> "parseData.html"
	print "<table style=\"width:100%\">\n" >> "parseData.html"
	print "<tr>\n" >> "parseData.html"
	
	# Table column headers
	print "\t<th align=\"left\">DATE</th>\n" >> "parseData.html"
	print "\t<th align=\"left\">SUBDIVISION</th>\n" >> "parseData.html"
	print "\t<th align=\"left\">LOT</th>\n" >> "parseData.html"
	print "\t<th align=\"left\">BLOCK</th>\n" >> "parseData.html"
	print "\t<th align=\"left\">VALUE</th>\n" >> "parseData.html"
	print "</tr>\n" >> "parseData.html"

	# define divisions between cells - taken from GAWK manual 4.7
	FPAT = "([^,]+)|(\"[^\"]+\")"
}

# This block searches the file, based upon the division parameters set above, 
# and searches for single-family dwellings
{
	# if we find a single family dwelling
	if(tolower($3) ~ /^single family dwelling/) {
		
		# Start the html data input, and add data for each of the desired
		# columns. Column 1 is the date, column 25 is the subdivision, 
		# column 6 is the lot, column 7 is the block, and column 8 is the
		# value of the dwelling
		print "<tr>" >> "parseData.html"
		for(i=1; i<= NF; i++) {
			if(i==1) {
				printf("\t<td>%s</td>\n", $i) >> "parseData.html"
			}
			if(i==5) {
				printf("\t<td>%s</td>\n", $i) >> "parseData.html"
			}
			if(i==6) {
				printf("\t<td>%s</td>\n", $i) >> "parseData.html"
			}
			if(i==7) {
				printf("\t<td>%s</td>\n", $i) >> "parseData.html"
			}
			if(i==8) {
				printf("\t<td>%s</td>\n", $i) >> "parseData.html"
			}
		}	

		# Ends data input
		print "</tr>\n" >> "parseData.html"
	}
}

# this block inputs the final html data when the read file reaches end
END {
	print "</table>\n\n" >> "parseData.html"
	print "</body>\n" >> "parseData.html"
	print "</html>\n" >> "parseData.html"
}
